stages:
  - code-quality
  - test
  - security
  - build
  - deploy-staging
  - deploy-production

variables:
  PYTHON_VERSION: "3.9"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Define reusable templates
.python-template: &python-template
  image: python:${PYTHON_VERSION}
  before_script:
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
    - if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

# Code Quality Stage
code-quality:
  <<: *python-template
  stage: code-quality
  script:
    - pip install black isort flake8 mypy
    - black --check --diff .
    - isort --check-only --diff .
    - flake8 .
    - mypy . --ignore-missing-imports
  allow_failure: false
  only:
    - merge_requests
    - main
    - develop

# Testing Stage
test:
  <<: *python-template
  stage: test
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8", "3.9", "3.10"]
  script:
    - pip install pytest pytest-cov
    - pytest --cov=src --cov-report=xml --cov-report=term
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Security Scanning
security-scan:
  <<: *python-template
  stage: security
  script:
    - pip install bandit safety
    - bandit -r . -f json -o bandit-report.json
    - safety check --json --output safety-report.json
  artifacts:
    reports:
      sast: bandit-report.json
    paths:
      - bandit-report.json
      - safety-report.json
    expire_in: 1 week
  allow_failure: true
  only:
    - merge_requests
    - main

# Build Docker Image
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
  dependencies:
    - test
    - security-scan

# Deploy to Staging
deploy-staging:
  stage: deploy-staging
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging environment..."
    - echo "Image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    # Add your staging deployment commands here
    # Example: kubectl set image deployment/myapp myapp=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  environment:
    name: staging
    url: https://staging.example.com
  only:
    - main
  dependencies:
    - build

# Deploy to Production
deploy-production:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to production environment..."
    - echo "Image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    # Add your production deployment commands here
  environment:
    name: production
    url: https://production.example.com
  when: manual
  only:
    - main
  dependencies:
    - deploy-staging

# Cleanup old images
cleanup:
  stage: deploy-production
  image: alpine:latest
  script:
    - echo "Cleaning up old Docker images..."
    # Add cleanup commands here
  when: manual
  only:
    - main
